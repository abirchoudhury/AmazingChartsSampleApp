/*
You are running a classroom and suspect that some of your students are passing around the answers to multiple choice questions disguised as random strings.

Your task is to write a function that, given a list of words and a string, finds and returns the word in the list that is scrambled up inside the string, if any exists. There will be at most one matching word. The letters don't need to be in order or next to each other. The letters cannot be reused.

Example:
words = ['cat', 'baby', 'dog', 'bird', 'car', 'ax']
string1 = 'tcabnihjs'
find_embedded_word(words, string1) -> cat (the letters do not have to be in order)

string2 = 'tbcanihjs'
find_embedded_word(words, string2) -> cat (the letters do not have to be together)

string3 = 'baykkjl'
find_embedded_word(words, string3) -> None / null (the letters cannot be reused)

string4 = 'bbabylkkj'
find_embedded_word(words, string4) -> baby

string5 = 'ccc'
find_embedded_word(words, string5) -> None / null

string6 = 'breadmaking'
find_embedded_word(words, string6) -> bird

All Test Cases:
find_embedded_word(words, string1) -> cat
find_embedded_word(words, string2) -> cat
find_embedded_word(words, string3) -> None / null
find_embedded_word(words, string4) -> baby
find_embedded_word(words, string5) -> None / null
find_embedded_word(words, string6) -> bird

Complexity analysis variables:

W = number of words in `words`
S = maximal length of each word or string






*/

using System;
using System.Collections.Generic;
using System.Linq;

class Solution {
    static void Main(String[] args) {
        string[] words = new string[] { "cat", "baby", "dog", "bird", "car", "ax"};
        //cat-baby-dog-bird-car-ax
        //baykkjl
        //tcabnihjs
        
        string string1 = "tcabnihjs";
        string string2 = "tbcanihjs";
        string string3 = "baykkjl";
        string string4 = "bbabylkkj";
        string string5 = "ccc";
        string string6 = "breadmaking";
        
        
        var charArray = new List<char>();
        var matchingChar = new List<char>();
        
        foreach(var w in words){
            char s = Convert.ToChar(w);
            charArray.Add(s);
        }
                        
        foreach (char s in string2){
            if (charArray.Contains(a => a == s)){
                //found a matching char 
                matchingChar.Add(s);                               ;
            }            
        }
        
        var wordFound = (from c in charArray
                        join m in matchingChar
                        on c equals m select m);
                        
        
        
        // wordFound = {t,c,a}
        foreach(var s in words){
            //s  = 'cat'
            //wordFroun = t,c,a
            //act
            //act
        }
        
        
        
        //loop through tcabnihjs
        //t 
        //find t in cat-ba
        
    }
}
